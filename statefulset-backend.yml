apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
  namespace: backend
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Mi
  storageClassName: standard

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: backend
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Mi
  storageClassName: standard

---

apiVersion: apps/v1
kind: StatefulSet 
metadata:
  namespace: backend
  name: minio
spec:
  selector:
    matchLabels:
      app: minio
  replicas: 1
  minReadySeconds: 10
  template:
    metadata:
      labels:
        app: minio
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: minio
        image: bitnami/minio:2024.3.30
        env:
        - name: MINIO_ROOT_USER
          value: minioadmin
        - name: MINIO_ROOT_PASSWORD
          value: minioadmin
        ports:
        - containerPort: 9000
        - containerPort: 9001
        volumeMounts:
        - name: data
          mountPath: /data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: minio-pvc


---

apiVersion: apps/v1
kind: StatefulSet 
metadata:
  namespace: backend
  name: redis
spec:
  selector:
    matchLabels:
      app: redis
  replicas: 1
  minReadySeconds: 10
  template:
    metadata:
      labels:
        app: redis
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: redis
        image: redis/redis-stack:7.2.0-v10
        env:
        - name: REDIS_HOST
          value: redis
        ports:
        - containerPort: 6379
        - containerPort: 8001
        volumeMounts:
        - name: data
          mountPath: /data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: redis-pvc

---

apiVersion: apps/v1
kind: StatefulSet 
metadata:
  namespace: backend
  name: rabbitmq
spec:
  selector:
    matchLabels:
      app: rabbitmq
  replicas: 1
  minReadySeconds: 10
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: rabbitmq
        image: rabbitmq:3.12.13-management
        env:
        - name: RABBITMQ_DEFAULT_USER
          value: admin
        - name: RABBITMQ_DEFAULT_PASS
          value: admin
        ports:
        - containerPort: 15672
        - containerPort: 5672
        volumeMounts:
        - name: rabbitmq
          mountPath: /data

---

apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-svc
  namespace: backend
spec:
  selector:
    app: rabbitmq
  ports:
  - name: console
    port: 15672
    targetPort: 15672
  - name: api
    port: 5672
    targetPort: 5672
  type: ClusterIP

---

apiVersion: v1
kind: Service
metadata:
  name: redis-svc
  namespace: backend
  labels:
    app: redis
spec:
  selector:
    app: redis
  ports:
  - name: http
    port: 8001
    targetPort: 8001
  - name: console
    port: 6379
    targetPort: 6379
  type: ClusterIP

---

apiVersion: v1
kind: Service
metadata:
  name: minio-svc
  namespace: backend
spec:
  selector:
    app: minio
  ports:
  - name: http
    port: 9000
    targetPort: 9000
  - name: console
    port: 9001
    targetPort: 9001
  type: ClusterIP

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rabbitmq-ingress
  namespace: backend
  labels:
    app: rabbitmq
spec:
  rules:
  - host: rabbitmq.ada-orchestration
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: rabbitmq-svc
            port:
              number: 15672
status:
  loadBalancer: {}

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: redis-ingress
  namespace: backend
  labels:
    app: redis
spec:
  rules:
  - host: redis.ada-archestration
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: redis-svc
            port:
              number: 8001

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: minio-ingress
  namespace: backend
  labels:
    app: minio
spec:
  rules:
  - host: minio.ada-orchestration
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: minio-svc
            port:
              number: 9001
      - path: /relatorios-fraudes/
        pathType: Prefix
        backend:
          service:
            name: minio-svc
            port:
              number: 9000